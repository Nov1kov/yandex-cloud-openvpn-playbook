---
- name: Create vm in yandex
  hosts: localhost
  connection: local
  vars:
    ssh_user: "ovpn"
  vars_files:
    - vars.yml

  tasks:
    - name: Generate public key from private key
      command: "ssh-keygen -y -f {{ ssh_private_key }}"
      register: ssh_public_key

    - name: Show public key
      debug:
        msg: "pubkey: {{ ssh_public_key.stdout }}"

    - name: Create vm
      ycc_vm:
        auth:
          token: "{{ yc_oauth_token }}"
        name: vpn
        metadata:
          user-data: |
            #cloud-config
            datasource:
              Ec2:
                strict_id: false
            ssh_pwauth: no
            users:
              - name: {{ ssh_user }}
                groups: sudo
                shell: /bin/bash
                sudo: 'ALL=(ALL) NOPASSWD:ALL'
                ssh_authorized_keys:
                  - {{ ssh_public_key.stdout }}
        folder_id: "{{ folder_id }}"
        platform_id: "Intel Cascade Lake"
        core_fraction: 20
        cores: 2
        memory: 2
        image_id: fd8ljvsrm3l1q2tgqji9 # ubuntu 2204
        disk_type: hdd
        disk_size: 10
        subnet_id: "{{ subnet_id }}"
        assign_public_ip: true
        preemptible: true
        state: present
      register: vm_creation_result

    - name: Add the new VM to the inventory
      add_host:
        name: "{{ vm_creation_result.response.networkInterfaces[0].primaryV4Address.oneToOneNat.address }}"
        ansible_user: "{{ ssh_user }}"
        ansible_ssh_private_key_file: "{{ ssh_private_key }}"

    - name: Setting facts about host name
      ansible.builtin.set_fact:
        vm_host: "{{ vm_creation_result.response.networkInterfaces[0].primaryV4Address.oneToOneNat.address }}"

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ vm_creation_result.response.networkInterfaces[0].primaryV4Address.oneToOneNat.address }}"
        port: 22
        delay: 10
        timeout: 300
        state: started
      when: vm_creation_result.changed

- name: Deploy openvpn on the new VM
  become: yes
  hosts: "{{ hostvars['localhost']['vm_host'] }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: packages | ensure apt list dir exists
      file:
        path: /var/lib/apt/lists/
        state: directory
        mode: 0755

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker with plugins
      apt:
        pkg:
          - docker-ce
          - docker-compose-plugin
        state: latest

    - name: Install Docker Module for Python
      pip:
        name:
          - docker

    - name: Run Docker container with OpenVPN
      docker_container:
        name: dockovpn
        image: alekslitvinenk/openvpn
        state: started
        restart_policy: no
        capabilities:
          - NET_ADMIN
        published_ports:
          - "1194:1194/udp"
          - "80:8080/tcp"
        auto_remove: yes

    - name: Display configuration message
      debug:
        msg: |
          Config server started, download your client.ovpn config at http://{{ hostvars['localhost']['vm_host'] }}:80/ 
          After you download your client config, http server will be shut down!
